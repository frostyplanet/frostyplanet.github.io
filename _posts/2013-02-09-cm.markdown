---
layout: post
title: 大集群配置管理系统开发(回忆)
categories: coding
date: 2013-02-09 03:00:00
---

先前在阿里的时候，做了一个配置管理项目，我独自负责两个部分的设计和开发：配置分发和执行(包括master和client)，还有版本管理仓库。
在经历若干个月，迭代若干版本，子公司内部推广了若干集群(大约2至3千台机器)之后，由于公司被拆分和合并，所在团队解散，
人员不足，还有我离开的原因，项目被荒废。现在回想起来，觉得还是得趁没有完全遗忘之前，总结一下思想和经验，就当是给别人留一点东西吧。
一来这并不算什么机密项目，二来只是总结一下设计而已，并不包括关键代码实现，应该没有什么不妥。时间有限，回忆不全，故不能写得太详细。

在大公司里头，根据自身特殊需要做轮子是很常见的事情。
这个项目按照ops团队提出的需求开展，光讨论和沟通在不同的team之间磨了不少时间。
我们开始调研了一下很流行的puppet，基本上puppet提供的文件维护、包安装、维护系统服务、脚本执行等等，都是我们需要的，但是有几个问题：

1. Ops团队并不希望去使用命令行和掌握特殊的policy配置的语法；

2. puppet的服务端效率比较底下，在两三百台的时候还好，对于我司这样的集群规模就不能满足了。

3. 就算是同样的服务配置文件，在不同的集群可能会有差异，需要在用户管理的时候有所体现。

4. 执行结果需要用直观的方式体现，因为领导都喜欢看报表，所以需要分发执行模块和前端有接口。

5. puppet是ruby写的，team里面并没有写ruby的人，加之puppet使用了一种和ruby ast树结合的独门coding pattern，当时找不到相关的资料，因此在puppet基础上开发对我们来说并不现实。

6. 能够批量回滚某个集群到某个版本的policy下发之前的状态。

所以经过几天激烈的yy之后，把方案说服了所有团队成员和直接领导(虽然实际上后端只有我一个人来做，另一位同学帮忙做前端)，大体模块划分如下：

	前端web & 版本管理模块 (policy及其他要维护的文件)  --> 生成模块（所分发的文件及其列表） --> 分发master  <--> 执行client 
		^																							|
		+-------------------------------------------------------------------------------------------+

其中policy信息因为有一些字段故存在数据库，上传的配置存放在版本管理仓库里面。对于不同集群的配置文件差异则可以体现为版本管理里面的不同branch。版本管理模块是用python做了一个git的接口，每个配置项目就是一个git (bared)仓库，通过接口实现直读和直写，如果你觉得这个有用的话，可以看[git-store-python](https://github.com/frostyplanet/git-store-python)

生成模块做的工作相对简单，为每台机器生成要下发的文件及其hash到一个这台机器的列表文件(Manifest), 为了靠谱(避免Manifest写了一半的时候被读取出错），另外生成一个相应的md5校验文件。 

分发和执行模块的设计其实是这里最有挑战的地方，一来要考虑通讯协议要把消息完整不遗漏地传递到准确地方， 二来要考虑master高并发效率还有规模可扩展，三要部署方便（client是纯python不依赖第三方库）。【时间已晚稍后待续】

